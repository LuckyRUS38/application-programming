import telebot
import os
import random
import cfg
import requests
from datetime import datetime

token = cfg.token

bot = telebot.TeleBot(token, parse_mode=None)
weather = {'01d': '‚òÄ', '02d': '‚õÖ', '03d': '‚òÅ', '04d': '‚òÅ', '09d': 'üåß', '10d': 'üíß', '11d': '‚õà', '13d': '‚ùÑ', '50d': 'üå´'}

def get_random_cats(directory):
    files = os.listdir(directory)
    file_name = files[random.randint(0, len(files) - 1)]
    return file_name


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message,
                 "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π, –∏ —É–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ —Å Telegram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, –¥–∞–ª–µ–µ –≤—ã—Å–ª–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –≥–æ—Ç–æ–≤–æ!")

@bot.message_handler(content_types=['location'])
def handle_location(message):
    url = 'https://api.openweathermap.org/data/2.5/forecast/daily?lat=%s&lon=%s&appid=%s&mode=%s&lang=%s&units=%s&cnt=%s'
    urlForDecode = 'https://api.openweathermap.org/geo/1.0/reverse?lat=%s&lon=%s&limit=5&appid=%s'
    lat = message.location.latitude
    lon = message.location.longitude

    addressDecode = urlForDecode % (lat, lon, cfg.API_KEY)
    address = url % (lat, lon, cfg.API_KEY, cfg.MODE, cfg.LANG, cfg.UNITS, cfg.CNT)
    responseDecode = requests.get(addressDecode)
    response = requests.get(address)
    if response.status_code == 200:
        data = response.json()
        dataDecode = responseDecode.json()
        bot.send_message(message.chat.id,
                         f"–í–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ - {dataDecode[0]['state']}, {dataDecode[0]['local_names']['ru']}, \n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –Ω–∞ 10 –¥–Ω–µ–π:\n")

        for i in range(0, cfg.CNT):
            bot.send_message(message.chat.id,
                             f"–î–∞—Ç–∞ - {datetime.utcfromtimestamp(int(data['list'][i]['dt'])).strftime('%d.%m.%Y')}, {weather[data['list'][i]['weather'][0]['icon']]}{data['list'][i]['weather'][0]['description']} "
                             f"\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: \n  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {data['list'][i]['temp']['min']}‚ÑÉ"
                             f"\n  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {data['list'][i]['temp']['max']}‚ÑÉ"
                             f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è \n–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ - {datetime.utcfromtimestamp(int(data['list'][i]['sunset'])).strftime('%H:%M:%S')}"
                             f"\n–í—Ä–µ–º—è –∑–∞—Ö–æ–¥–∞ - {datetime.utcfromtimestamp(int(data['list'][i]['sunrise'])).strftime('%H:%M:%S')}")

        print('All good!')
    elif response.status_code == 401:
        print('Key protyx')
    elif response.status_code == 400:
        print('Bad requets')


bot.infinity_polling()
